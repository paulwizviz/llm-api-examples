package golm

import (
	"bufio"
	"bytes"
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// CompletionRequest is the create completion requests
type CompletionRequest struct {

	// Model field is the ID of the model.
	// This is the required field.
	Model string `json:"model"`

	// Prompt generate completions for, encoded as a string,
	// array of strings, array of tokens, or array of token arrays.
	//
	// Note that <|endoftext|> is the document separator that the model
	// sees during training, so if a prompt is not specified the model
	// will generate as if from the beginning of a new document.
	//
	// This is a required field.
	Prompt []string `json:"prompt"`

	// BestOf Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
	// When used with n, best_of controls the number of candidate completions and n specifies how many to return â€“ best_of must be greater than n.
	//
	// Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have
	// reasonable settings for max_tokens and stop
	//
	// This is an optional field.
	BestOf *int `json:"best_of"`

	// Echo back the prompt in addition to the completion
	//
	// This is an optional field with default value false.
	Echo *bool `json:"echo"`

	// FrequencePenalty is the number between -2.0 and 2.0.
	// Positive values penalize new tokens based on their
	// existing frequency in the text so far, decreasing
	// the model's likelihood to repeat the same line verbatim.
	//
	// This is an optional field with default value 0
	FrequencyPenalty *int `json:"frequency_penalty"`

	// Modify the likelihood of specified tokens appearing in the completion.
	// Accepts a JSON object that maps tokens (specified by their token ID in
	// the GPT tokenizer) to an associated bias value from -100 to 100. You
	// can use this tokenizer tool to convert text to token IDs. Mathematically,
	// the bias is added to the logits generated by the model prior to sampling.
	// The exact effect will vary per model, but values between -1 and 1 should
	// decrease or increase likelihood of selection; values like -100 or 100 should
	// result in a ban or exclusive selection of the relevant token.
	//
	// As an example, you can pass {"50256": -100} to prevent the <|endoftext|> token
	// from being generated.
	//
	// This is an optional field with default value null
	LogitBias map[string]int `json:"logit_bias"`

	// LogProbs include the log probabilities on the logprobs most likely output tokens,
	// as well the chosen tokens. For example, if logprobs is 5, the API will return a
	// list of the 5 most likely tokens. The API will always return the logprob of the
	// sampled token, so there may be up to logprobs+1 elements in the response.
	// The maximum value for logprobs is 5.
	//
	// This is an optional field with a default value 5
	LogProbs *int `json:"logprobs"`

	// MaxTokens is the maximum number of tokens that can be generated in the completion.
	// The token count of your prompt plus max_tokens cannot exceed the model's context
	// length. Example Python code for counting tokens.
	//
	// This is an optional field with default value 16
	MaxTokens *int `json:"max_tokens"`

	// N is how many completions to generate for each prompt.
	// Note: Because this parameter generates many completions,
	// it can quickly consume your token quota. Use carefully and
	// ensure that you have reasonable settings for max_tokens and stop.
	//
	// This is an optional field with default value 1
	N *int `json:"n"`

	// PresencePenalty is number between -2.0 and 2.0. Positive values
	// penalize new tokens based on whether they appear in the text so far,
	// increasing the model's likelihood to talk about new topics.
	// See more information about frequency and presence penalties.
	//
	// This is an optional field with default value 0
	PresencePenalty *int `json:"presence_penalty"`

	// Seed if specified, our system will make a best effort to sample
	// deterministically, such that repeated requests with the same seed
	// and parameters should return the same result.
	// Determinism is not guaranteed, and you should refer to the system_fingerprint
	// response parameter to monitor changes in the backend.
	//
	// This is an optional field with default value 0
	Seed *int `json:"seed"`

	// Up to 4 sequences where the API will stop generating
	// further tokens. The returned text will not contain the
	// stop sequence.
	//
	// This is an optional field with default value null
	Stop []string `json:"stop"`

	// Stream  Whether to stream back partial progress.
	// If set, tokens will be sent as data-only server-sent
	// events as they become available, with the stream terminated
	// by a data: [DONE] message.
	//
	// This is an optional field with default value false
	Stream bool `json:"stream"`

	// StreamOptions for streaming response. Only set this when you set stream: true.
	//
	// This is an optional field with default value to null
	StreamOptions any `json:"stream_options"`

	// Suffix is the suffix that comes after a completion of inserted text.
	// This parameter is only supported for gpt-3.5-turbo-instruct.
	//
	// This is an optional value with default value null
	Suffix *string `json:"suffix"`

	// Temperature is the sampling temperature to use, between 0 and 2.
	// Higher values like 0.8 will make the output more random, while
	// lower values like 0.2 will make it more focused and deterministic.
	// We generally recommend altering this or top_p but not both.
	//
	// This is an optional field with default value 1.
	Temperature *int `json:"temperature"`

	// TopP is an alternative to sampling with temperature, called nucleus sampling,
	// where the model considers the results of the tokens with top_p probability mass.
	// So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	// We generally recommend altering this or temperature but not both.
	//
	// This is an optional field with default value of 1
	TopP *int `json:"top_p"`

	// User is a unique identifier representing your end-user, which can help
	// OpenAI to monitor and detect abuse.
	//
	// This is an optional field
	User *string `json:"user"`
}

// CompletionChoicesResponse choice of completion response
type CompletionChoicesResponse struct {
	Text         string `json:"text"`
	Index        int    `json:"index"`
	LogProbs     string `json:"logprobs,omitempty"`
	FinishReason string `json:"finish_reason"`
}

// CompletionUsageResponse useage of completion response
type CompletionUsageResponse struct {
	Prompt           int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

// CompletionResponse is a completion response
type CompletionResponse struct {
	ID                string                      `json:"id"`
	Object            string                      `json:"object"`
	Created           int                         `json:"created"`
	Model             string                      `json:"model"`
	SystemFingerPrint string                      `json:"system_fingerprint"`
	Choices           []CompletionChoicesResponse `json:"choices"`
	Usage             CompletionUsageResponse     `json:"usage"`
}

func (c client) Completion(request CompletionRequest) ([]CompletionResponse, error) {
	endPoint, err := url.JoinPath(c.baseURL, "/v1/completions")
	if err != nil {
		return nil, err
	}

	reqBody, err := json.Marshal(request)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodPost, endPoint, bytes.NewReader(reqBody))
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", "application/json")

	httpClient := http.Client{
		Timeout: time.Duration(c.timeout) * time.Second,
	}
	response, err := httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()

	if request.Stream {
		responses := parseGenerateStream(response.Body)
		return responses, nil
	}

	decoder := json.NewDecoder(response.Body)
	var completionResponse CompletionResponse
	if err := decoder.Decode(&completionResponse); err != nil {
		return nil, err
	}
	var completeResponses []CompletionResponse
	completeResponses = append(completeResponses, completionResponse)
	return completeResponses, nil
}

func parseGenerateStream(body io.ReadCloser) []CompletionResponse {
	var responses []CompletionResponse

	reader := bufio.NewReader(body)
loop:
	for {
		ln, err := reader.ReadString('\n')
		if err != nil {
			if errors.Is(err, io.EOF) {
				break loop
			}
			continue
		}

		trim := strings.Replace(ln, "data:", "", 1)
		trim = strings.TrimLeft(trim, " ")
		if trim[0] != '{' && trim[len(trim)-1] != '}' {
			continue
		}
		var response CompletionResponse
		err = json.Unmarshal([]byte(trim), &response)
		if err != nil {
			continue
		}
		responses = append(responses, response)
	}
	return responses
}
