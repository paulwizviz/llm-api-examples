package ollama

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
)

func ReadTestData(fname string) ([]byte, error) {
	pwd, err := os.Getwd()
	if err != nil {
		return nil, err
	}

	rootPath := filepath.Dir(filepath.Dir(pwd))
	fPath := filepath.Join(rootPath, "testdata", fname)
	data, err := os.ReadFile(fPath)
	if err != nil {
		return nil, err
	}
	return data, nil
}

func TestEncodeBase64(t *testing.T) {
	testData, err := ReadTestData("test.txt")
	if err != nil {
		assert.Fail(t, "Unable to read test data: %v", err)
	}

	got := EncodeBase64(testData)
	want := "VGhpcyBpcyBhIHRlc3Q="
	assert.Equal(t, want, got, fmt.Sprintf("Want: %v Got: %v", want, got))
}

type bytesReadCloser struct {
	*bytes.Reader
}

func (b bytesReadCloser) Close() error {
	return nil // No-op close
}

func TestParseStream(t *testing.T) {
	testcases := []struct {
		input string
		want  int
	}{
		{
			input: `{"model":"llama3.2:1b","created_at":"2025-02-18T10:22:45.141268Z","response":"The","done":false}
{"model":"llama3.2:1b","created_at":"2025-02-18T10:22:45.174099Z","response":" sky","done":false}
{"model":"llama3.2:1b","created_at":"2025-02-18T10:22:45.20971Z","response":" appears","done":false}
{"model":"llama3.2:1b","created_at":"2025-02-18T10:22:52.330413Z","response":"","done":true,"done_reason":"stop","context":[128006,9125,128007,271,38766,1303,33025,2696,25,6790,220,2366,18,271,128009,128006,882,128007,271,10445,374,279,13180,6437,30,128009,128006,78191,128007,271,791,13180,8111,6437,1606,315,264,25885,2663,13558,64069,72916,11,7086,1306,279,8013,83323,10425,13558,64069,13,1283,11352,430,994,40120,29933,9420,596,16975,11,433,35006,13987,35715,315,45612,1778,439,47503,323,24463,382,9673,35715,45577,279,3177,304,682,18445,11,719,814,45577,24210,320,12481,8,93959,810,1109,5129,320,1171,8,93959,13,1115,374,3249,279,13180,11383,8111,6437,311,1057,6548,11,5423,2391,279,62182,994,279,7160,374,32115,382,791,2944,369,420,72916,2515,374,4245,311,279,2204,5627,430,89235,320,4238,19252,8,16681,449,279,35715,315,45612,304,279,16975,13,578,24210,46406,3177,374,38067,810,30820,1109,279,5129,46406,3177,11,902,374,3249,584,1518,279,13180,439,6437,382,2181,596,5922,27401,430,520,44084,323,64919,11,279,13180,649,1935,389,264,2134,315,8146,4245,311,279,72916,315,3177,555,45475,19252,11,16174,11,323,3090,38752,13,1115,374,3629,14183,311,439,330,2445,31436,1,477,330,266,8801,33349,1933,1210,578,4839,8146,649,13592,11911,389,279,892,315,1938,11,279,36958,315,279,7160,11,323,1023,9547,382,28589,11,279,13180,596,6437,1933,374,264,1121,315,279,16628,1990,40120,11,45475,45612,11,323,13987,35715,304,279,16975,11,902,374,3967,439,13558,64069,72916,13],"total_duration":9212642458,"load_duration":809859167,"prompt_eval_count":31,"prompt_eval_duration":1205000000,"eval_count":252,"eval_duration":7192000000}
`,
			want: 4,
		},
		{
			input: `{"model":"llama3.2:1b","created_at":"2025-02-18T10:22:45.141268Z","response":"The","done":false}
{"model":"llama3.2:1b","created_at":"2025-02-18T10:22:45.174099Z","response":" sky","done":false
{"model":"llama3.2:1b","created_at":"2025-02-18T10:22:45.20971Z","response":" appears","done":false}
{"model":"llama3.2:1b","created_at":"2025-02-18T10:22:52.330413Z","response":"","done":true,"done_reason":"stop","context":[128006,9125,128007,271,38766,1303,33025,2696,25,6790,220,2366,18,271,128009,128006,882,128007,271,10445,374,279,13180,6437,30,128009,128006,78191,128007,271,791,13180,8111,6437,1606,315,264,25885,2663,13558,64069,72916,11,7086,1306,279,8013,83323,10425,13558,64069,13,1283,11352,430,994,40120,29933,9420,596,16975,11,433,35006,13987,35715,315,45612,1778,439,47503,323,24463,382,9673,35715,45577,279,3177,304,682,18445,11,719,814,45577,24210,320,12481,8,93959,810,1109,5129,320,1171,8,93959,13,1115,374,3249,279,13180,11383,8111,6437,311,1057,6548,11,5423,2391,279,62182,994,279,7160,374,32115,382,791,2944,369,420,72916,2515,374,4245,311,279,2204,5627,430,89235,320,4238,19252,8,16681,449,279,35715,315,45612,304,279,16975,13,578,24210,46406,3177,374,38067,810,30820,1109,279,5129,46406,3177,11,902,374,3249,584,1518,279,13180,439,6437,382,2181,596,5922,27401,430,520,44084,323,64919,11,279,13180,649,1935,389,264,2134,315,8146,4245,311,279,72916,315,3177,555,45475,19252,11,16174,11,323,3090,38752,13,1115,374,3629,14183,311,439,330,2445,31436,1,477,330,266,8801,33349,1933,1210,578,4839,8146,649,13592,11911,389,279,892,315,1938,11,279,36958,315,279,7160,11,323,1023,9547,382,28589,11,279,13180,596,6437,1933,374,264,1121,315,279,16628,1990,40120,11,45475,45612,11,323,13987,35715,304,279,16975,11,902,374,3967,439,13558,64069,72916,13],"total_duration":9212642458,"load_duration":809859167,"prompt_eval_count":31,"prompt_eval_duration":1205000000,"eval_count":252,"eval_duration":7192000000}
`,
			want: 3,
		},
	}

	for index, tc := range testcases {
		bReader := bytes.NewReader([]byte(tc.input))
		bR := bytesReadCloser{bReader}
		got := parseGenerateStream(bR)
		assert.Equal(t, tc.want, len(got), fmt.Sprintf("Case: %d Want: %v Got: %v", index, tc.want, len(got)))
	}
}
